[
{
	"uri": "/",
	"title": "Deploying Wordpress on AWS Cloud",
	"tags": [],
	"description": "",
	"content": "Deploy Wordpress on AWS Cloud Overview In this lab, you will learn and implement Wordpress deployment on AWS Cloud. Practice creating and installing Wordpress on EC2 Instance on public subnet connecting to Database Database in private subnet in VPC. This lab ensures that the Wordpress application has the ability to scale when encountering a large number of requests and has the ability to balance the load when more than one server is running. Database deployed Multi AZ provides the ability to ensure database availability when deployed.\nAmazon CloudFront Amazon CloudFront is a content delivery network (CDN) service built for high-performance, secure user experience.\nAuto Scaling Group Auto Scaling Group is a group of EC2 Instances. This group can scale the number of EC2 Instance members according to the scaling policy you set.\nLoad Balancer The Load Balancer is a tool that can distribute the traffic of exchanged data to AWS resources (specifically in this lab, EC2 Instances) in the Target Group.\nTarget Group The Target Group is a group of AWS resource elements that will receive data traffic delivered and transported by the Load Balancer.\nAmazon Relational Database Service (Amazon RDS) Amazon RDS is an automated database operation service (Database-as-a-service) that allows you to automate the creation, operation, and scaling of a database. relational database on the AWS cloud computing platform.\nMultiple Availability Zone (Multi-AZ) Multi-AZ is a feature that allows you to deploy a synchronous backup copy of the original database on a DB instance in a different Availability Zone. If access to the original database is interrupted, the other synchronous backup will be used instead to ensure high availability for your database.\n"
},
{
	"uri": "/5-backupandrestore/5.1-createdbsnapshot/",
	"title": "Create DB snapshot",
	"tags": [],
	"description": "",
	"content": " Access the AWS Management Console Find RDS Select RDS In the RDS . interface Select Databases Select wordpress-db Select Actions Select Take snapshot In the snapshot creation interface Snapshot name, enter wordpress-snapshot Select Take snapshot Complete snapshot creation "
},
{
	"uri": "/4-asgforec2/4.1-createami/",
	"title": "Initialize AMI from Webserver Instance",
	"tags": [],
	"description": "",
	"content": " Access to EC2 Select Instances Select webserver-ec2 Select Actions Select Image and templates Select Create image Configure Template Image name, enter webserver-AMI Image description, enter AMI for Webserver Select Create image AMI initialization takes about 5 minutes. After 5 minutes, we see the Status change to Available "
},
{
	"uri": "/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduce In this exercise, we will conduct the deployment of a Wordpress application with Auto Scaling Group to ensure the scalability of the application according to the needs of the visitors. In addition, we will also implement a Load Balancer to balance the load and coordinate user access requests to our Application Tier. In addition, use the Amazon CloudFront service for the most effective application.\nWith the Database Instance (DB) part, we will deploy the database on Multi AZ and take a DB snapshot to facilitate Roll Back as well as ensure data availability (Multi AZ).\nWordPress WordPress is a free and open source system for building websites written in the PHP programming language along with a MySQL or MariaDB database. WordPress is the easiest to use and most popular website building platform in the world today, 42.8% of the top 10 million websites use WordPress. WordPress is a great website building platform for many types of websites. For example, Blog, online sales page, company introduction, recruitment,\u0026hellip; Built in a convenient and fast way. WordPress is a great solution for individuals and small and medium businesses.\nAuto Scaling Group Auto Scaling Group is a group of EC2 Instances. This group can scale the number of EC2 Instance members according to the scaling policy you set.\nLaunch Template Launch Template is a feature that helps you create a template for the initialization of EC2 Instances. As a result, you can streamline and simplify the creation of EC2 Instances for the Auto Scaling service.\nLoad Balancer The Load Balancer is a tool that can distribute the traffic of exchanged data to AWS resources (specifically in this lab, EC2 Instances) in the Target Group.\nTarget Group The Target Group is a group of AWS resource elements that will receive data traffic delivered and transported by the Load Balancer.\nAmazon CloudFront Amazon CloudFront is a content delivery network (CDN) service built for high-performance, secure user experience.\nAmazon Relational Database Service (Amazon RDS) Amazon RDS is an automated database operation service (Database-as-a-service) that allows you to automate the creation, operation, and scaling of a database. relational database on the AWS cloud computing platform.\nMultiple Availability Zone (Multi-AZ) Multi-AZ is a feature that allows you to deploy a synchronous backup copy of the original database on a DB instance in a different Availability Zone. If access to the original database is interrupted, the other synchronous backup will be used instead to ensure high availability for your database.\n"
},
{
	"uri": "/2-prerequiste/2.1-createvpcandsubnet/",
	"title": "Preparing VPC and Subnet",
	"tags": [],
	"description": "",
	"content": "Create VPC Go to AWS Management Console. Find VPC Select VPC In the VPC interface. Select Your VPCs Select Create VPC Options in VPC Wirard. Select VPC and more Enter the name VPC Enter CIDR: 192.168.0.0/16 Choose the number of public/private subnets: 2 CIDR option. public subnet 1: 192.168.1.0/24 public subnet 2: 192.168.2.0/24 private subnet 1: 192.168.3.0/24 private subnet 2: 192.168.4.0/24 "
},
{
	"uri": "/2-prerequiste/2.2-createsecuritygroupec2/",
	"title": "Create Security Group for EC2",
	"tags": [],
	"description": "",
	"content": "Create VPC Security group for Amazon EC2 We will initialize and configure the Security group for the Amazon EC2 instance to use to connect the MySQL database at the DB instance and execute the application.\nIn VPC interface Select Security Group Select Create security group Perform configuration Security group name, enter WebServer-SG Description, enter Security Group for Web Server Select VPC created Configure Inbound rules To add a rule, select Add rule SSH port 22 used to connect to local machine. Source select My IP HTTP port 80 and source is Anywhere IPv4 HTTPS port 443 and source is Anywhere IPv4 Select Create security group "
},
{
	"uri": "/4-asgforec2/4.2-createlaunchtemplate/",
	"title": "Launch Template",
	"tags": [],
	"description": "",
	"content": "In this section, you will create a Launch Template using the AMI you created from the Amazon Linux 2 Instance in the previous step.\nAccess to EC2 Select Launch Templates Select Create launch template In Create launch template interface Launch template name, enter Webserver-ASG-template Template version description, enter Template for Webserver ASG Perform AMI . selection Select My AMIs Select Owned by me Select webserver-AMI Make Instance type selection Select t2.micro Key pair, select asg-keypair created when creating EC2 instance. Perform Network Configuration Subnet, select public subnet Firewall (Security Group), select Select existing security group Select Webserver-SG Check and execute Create launch template Execute successfully and select View launch templates View the template just created. "
},
{
	"uri": "/2-prerequiste/",
	"title": "Preparation steps",
	"tags": [],
	"description": "",
	"content": "\rIn the preparation step we will proceed to create VPC and Subnet for the web application to work Create 2 SGs for EC2 instance and DB instance\nTo learn how to create EC2 instances and VPCs with public/private subnets, you can refer to the lab:\nWorks with Amazon VPC About Amazon EC2 About Amazon Database Content Preparing VPC and Subnet Create Security Group for EC2 Create Security Group for Database Instance Initiate EC2 Instance Initialize Database Instance "
},
{
	"uri": "/5-backupandrestore/5.2-restorewithsnapshot/",
	"title": "Restore with DB snapshot",
	"tags": [],
	"description": "",
	"content": " In the RDS . interface Select Snapshots Select the snapshot you just created Select Actions Select Restore snapshot In Settings DB instance identifier, enter wordpress-db-restore Choose create a standby instance because we use multi AZ initially Set up network for restore Database instance Select Restore DB instance Wait for about 10 minutes, the status of the database changes to Available and is successfully initialized. "
},
{
	"uri": "/2-prerequiste/2.3-createsecuritygroupdb/",
	"title": "Create Security Group for Database Instance",
	"tags": [],
	"description": "",
	"content": "Create VPC Security group for Amazon EC2 We will create and configure a Security group for the Amazon RDS Database instance to use to host the CDSL and allow data access over port 3306.\nIn VPC interface Select Security Group Select Create security group Perform configuration Security group name, enter Database-SG Description, enter Security Group for Database Instance Select VPC created Configure Inbound rules Select MYSQL/Aurora port 3306 and custon source is WebServer-SG Select Create security group "
},
{
	"uri": "/3-installwordpressonec2/",
	"title": "Installing wordpress on EC2",
	"tags": [],
	"description": "",
	"content": "\rDetails of EC2 Instance connection After connecting EC2 instance successfully. You will take the following steps to prepare to deploy the application: Install httpd service by copying the following command: sudo yum install -y httpd Install php-mysql sudo yum install php-mysql -y Install php7.3 sudo amazon-linux-extras install -y php7.3 Move the directory to where wordpress executes to download and install\n$ cd /var/www/html/\r$ ls Download and install wordpress $ wget https://wordpress.org/latest.tar.gz\r$ tar -xzf latest.tar.gz Check download and extract results $ ls Move into wordpress folder and check $ cd wordpress\r$ ls Open a web browser to access the public ipv4 dns address of the ec2 webserver\nCopy ipv4 dns public Open browser with Public ipv4 dns and add /wordpress/wp-admin/setup-config.php Set up basic parameters for wordpress\nDatabase Name: awsuser (Name of previously created database) Username: admin Password: dbpassword Database Host: Your Endpoint Database Table Preflix: wp_ After submitting\nRename the file wp-config-sample.php to file wp-config.php\n$ mv wp-config-sample.php wp-config.php Delete the data in the wp-config.php file and copy the information in the previous step into the wp-config.php file.\n$ cat \u0026gt; wp-config.php\r$ nano wp-config.php Select run the installation to proceed to the next step\nAfter the installation is complete, login to wordpress admin\nSuccessfully logged in to the wordpress dashboard interface\n"
},
{
	"uri": "/4-asgforec2/4.4-createloadbalancer/",
	"title": "Create Load Balancer",
	"tags": [],
	"description": "",
	"content": " Access to EC2 Select Load Balancers Select Create Load Balancer Load balancer types section Select HTTP/HTTPS Select Create In the Create Application Load Balancer interface Load balancer name, enter Webserver-LB Scheme, select Internet-facing IP address type, select IPv4 Perform Network mapping configuration VPC, choose wordpress-vpc Mapping, select us-east-1a and us-east-1b Select subnet Configure the security group, select Webserver-SG. Section Listeners and routing, in Default actions select Webserver-TG Check again and select Create load balancer Create Application Load Balancer successfully and select View load balancer In the Load Balancer interface. The Load Balancer creation process will take about 5-10 minutes to complete. You can check the status change from provisioning to active in the Load Balancer list. Select Webserver-LB Copy the DNS name of the Load Balancer. Access by pasting the DNS name into the browser. Next we will proceed to configure the Auto Scaling Group feature, which will automatically increase the number of our EC2 instances when the traffic is high.\n"
},
{
	"uri": "/4-asgforec2/",
	"title": "Implement Autoscaling for wordpress Instance",
	"tags": [],
	"description": "",
	"content": "In this step, you will initialize an Amazon Machine Image (AMI) for the Amazon Linux Instance that was set up in the previous step. An AMI is a configuration snapshot of an EC2 Instance that allows you to deploy multiple EC2 Instances with the same configuration as the original EC2 Instance. AMI is commonly used inside Launch Template to templating EC2 Instances.\n"
},
{
	"uri": "/2-prerequiste/2.4-createec2/",
	"title": "Initiating EC2 Instance",
	"tags": [],
	"description": "",
	"content": "\rWe perform Amazon EC2 initialization in Public subnet for the purpose of connecting MySQL database of DB instance in Private subnet\nAccess AWS Management Console Find EC2 Select EC2 In the EC2 interface Select Instance Select launch Instance In the Launch an instance interface Name, enter webserver-ec2 AMI select Amazon linux Proceed to select Instance type and select Create new key pair Instance type select t2.micro Key pair select create new key pair In the Create key pair interface Key pair name, enter webserver-keypair Key pair type, select RSA Private key file format, select .pem Select Create key pair Configure Network for instance VPC choose VPC to create for the lab Select public subnet Auto-assign public IP, select Enable Select Select existing security group Select WebServer-SG Proceed Create Instante from previous settings In the Summary interface select Launch Instance Complete initialization EC2, select View all instances to see details This EC2 instance will be used to connect to the DB instance and deploy the Wordpress application "
},
{
	"uri": "/5-backupandrestore/",
	"title": "Backup and restore database",
	"tags": [],
	"description": "",
	"content": "Amazon RDS automatically initiates and stores backups for your Databse (DB instance) within the backup timeframe you set (If not set, RDS will automatically set to 30 minutes in the timeframe corresponding to each Region specified by AWS). RDS automatically stores backups with a default retention period of 7 days that you set when you initialize or modify the DB Instance.\nRDS will take a snapshot of the DB instance\u0026rsquo;s storage volume and back up the entire DB instance (not just the database). When necessary, you can restore your database at any point within that timeframe.\nIn order for automatic backups to take place, you must ensure that: Your DB instance must be active (AVAILABLE) for the backup to take place. If the DB Instance is in a different state (e.g. STORAGE_FULL) then the backup will not be executed. Automatic backup will not be performed if you are copying that DB instance in the same Region.\nContent Initialize Snapshot for Database Instance Perform DB backup from Snapshot "
},
{
	"uri": "/4-asgforec2/4.5-createasg/",
	"title": "Create Auto Scaling Group",
	"tags": [],
	"description": "",
	"content": " Access to EC2 Select Auto Scaling Groups Select Create Auto Scaling group Auto Scaling Group name Enter Webserver-ASG Launch templates. choose Webserver-template Select Next Proceed to configure the Network • VPC, choose wordpress-vpc • Select AZ and subnet • Select Next Perform Load balancing configuration Select Attach to an existing load balancer Select Choose from your load balancer target groups Select Webserver-TG Select Next Configure group size and scaling policy. Desired capacity: Enter 1. (Default) Minimum capacity: Enter 1. (Default) Maximum capacity: Enter 3 Under Scaling policies - optional: Select this exercise to make it easier for the next check to be performed. You can completely set the resource scaling policy according to your needs. Select Target tracking scaling policy Scaling policy name, enter Target Tracking Policy Metric type, select Application Load Balancer request count per target. Target group, enter FCJ-Management Target value, enter 30 Select Next Select Next Select Next Select Create Auto Scaling group Finish creating Auto Scaling groups. The initialization of Auto Scaling Group will be done, the newly created Auto Scaling Group will be displayed in the list, and you can select it to view detailed information. We can track existing EC2 instances in Auto Scaling Group on the Instance management page. Instances with InService status are ready-to-go instances. "
},
{
	"uri": "/2-prerequiste/2.5-createdb/",
	"title": "Launch Database Instance",
	"tags": [],
	"description": "",
	"content": "\rWe perform Database Instance initialization in Private subnet for the purpose of protecting DB Instance connection only for EC2 Web server access.\nAccess AWS Management Console Find RDS Select RDS In the Amazon RDS interface Select Create Database Proceed to configure Select Standard create In Engine options, select MySQL Select the SQL version suitable for Wordpress (version 5.7) In the Template section Select Production to use Availability and durability (can choose Multi-AZ DB instance or Multi-AZ DB Cluster or Single DB instance). In the lab using Multi-AZ DB instance does not support Multi-AZ DB cluster snapshot In Engine options, select MySQL. If you choose the Free tier, you won\u0026rsquo;t use Availability and durability, you can\u0026rsquo;t choose the Deployment type\nFor deployment in Dev/Test (or Production) environment, you should choose Multi-AZ deployment to create an additional standby instance in another AZ for redundancy.\nConfigure information about Database DB instance identifier, enter wordpress-db Master username, enter admin Master password, enter your password. Example lab: dbpassword Confirm password, re-enter the password. Configure Instance and Storage to Default Network configuration for DB instance Network type, select IPv4 VPC, select the VPC for the created lab Subnet group, select Create new DB subnet Group Public access, select No For VPC Security group, select Choose existing Select DB instance SG Database Configuration Initial database name, enter awsuser Remaining items to default Wait about 10 minutes, finish creating DB instance and Status of DB instance changes to Available In the interface DB instance just created Select Connectivity \u0026amp; security Store Enpoint \u0026amp; port of DB instance to perform next steps configuration. "
},
{
	"uri": "/6-createcloudfront/",
	"title": "Create Cloudfront for Web Server",
	"tags": [],
	"description": "",
	"content": " Access the AWS Management Console Find Cloudfront Choose Cloudfront In the Cloudfront . interface Select Create a Cloudfront Distribution In the Create . interface Origin domain select Load Balancer domain Next leave everything as default and select Create distribution After successfully creating Cloudfront Distribution, the initialization process takes about 5 minutes. Save the Distribution Domain Name value to proceed with the installation in the next step In WordPress wp-admin interface Select Plugins Select Add New In the WordPress Plugin interface Type in the search box: WP Faster Cache Select Install now "
},
{
	"uri": "/7-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "We will take the following steps to delete the resources we created in this exercise.\nRemove Auto Scaling Group: Access EC2 Management Console On the left navigation bar, select Auto Scaling Groups Select Auto Scaling Group related to the lab. Click Delete Type delete in the empty box and press delete Remove Load Balancer: Access EC2 Management Console On the left navigation bar, select Load Balancers Select Load Balancer related to the lab. Click Actions. Click Delete. Remove Target Group: Access EC2 Management Console On the left navigation bar, select Target Groups Select Target Group related to the lab. Click Actions. Click Delete. Click Yes, delete Remove Launch Template: Access EC2 Management Console On the left navigation bar, select Launch Templates Select Launch Template related to the lab. Click Actions. Click Delete template Type delete in the empty box and press delete Delete AMI: Access EC2 Management Console On the left navigation bar, select AMIs Select the AMI related to the lab. Click Actions. Click Deregister. Click Continue. Terminate EC2 instance: Access EC2 Management Console On the left navigation bar, select Instances Select all EC2 Instances related to the lab. Click Actions. Click Manage Instance State. Select Terminate. Click Change State Delete DB Instance Access the RDS Management Console On the left navigation bar, select Databases Select all DB Instances related to the lab. Click Actions. Click Delete Uncheck Create final snapshot? and select I acknowledge that upon instance deletion, automated backups, including system snapshots and point-in-time recovery, will no longer be available Type delete me in the empty box. Click Delete Remove VPC + subnet + security group: Access VPC Management Console On the left navigation bar, select Your VPCs Select VPC related to Lab Click to select Action Click Delete VPC Type delete in the empty box Click Delete Remove Cloudfront Distribution Access Cloudfront Management Console On the left navigation bar, select Distribution Select Distribution related to the lab Select Delete "
},
{
	"uri": "/4-asgforec2/4.3-createtg/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "=\u0026mdash; title : \u0026ldquo;Create Target Group\u0026rdquo; date : \u0026ldquo;r Sys.Date()\u0026rdquo; weight : 3 chapter : false pre : \u0026quot; 4.3 \u0026quot; Access the EC2 interface Select Target Groups Select Create target group Make configuration Select Instances Set the following parameters for the target group: Target group name: Enter the name of the target group (eg Webserver-TG). Protocol: HTTP. Port: 80 The remaining items leave the default. Select next In the Available instances . interface Select webserver instance Select port 80 Select Include as pending below (if not selected when accessing with DNS Load Balancer will get an HTTP 503: Service unavailable error) Review Select Create target group Finish creating Target group "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]